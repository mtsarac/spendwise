generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Kullanıcı modeli – Expense ve Income ile bire-çok ilişkili
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expenses Expense[]
  incomes  Income[]

  summaries MonthlySummary[]

  UserSettings UserSettings[]
}

// Harcama modeli
model Expense {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  amount      Float
  currencyId  String // Para birimi ilişkisi
  categoryId  String // Kategori ilişkisi
  paymentId   String // Ödeme yöntemi ilişkisi
  image       String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency Currency      @relation(fields: [currencyId], references: [id])
  category Category      @relation(fields: [categoryId], references: [id])
  payment  PaymentMethod @relation(fields: [paymentId], references: [id])

  @@index([userId, date]) // Kullanıcı ve tarih bazında indeksleme
}

// Gelir modeli – giderle benzer yapı
model Income {
  id             String   @id @default(cuid())
  userId         String
  title          String
  description    String?
  amount         Float
  currencyId     String
  incomeSourceId String
  image          String?
  date           DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency     Currency     @relation(fields: [currencyId], references: [id])
  incomeSource IncomeSource @relation(fields: [incomeSourceId], references: [id])

  @@index([userId, date]) // Kullanıcı ve tarih bazında indeksleme
}

// Aylık özet (income - expense)
model MonthlySummary {
  id           String   @id @default(cuid())
  userId       String
  month        DateTime
  totalIncome  Float
  totalExpense Float
  netBalance   Float

  user User @relation(fields: [userId], references: [id])
}

// Sabit para birimleri tablosu
model Currency {
  id     String @id @default(cuid())
  code   String @unique // USD, TRY, EUR
  name   String
  symbol String

  expenses Expense[]
  incomes  Income[]

  UserSettings UserSettings[]
}

// Harcama kategorileri (gıda, ulaşım vb.)
model Category {
  id   String  @id @default(cuid())
  name String
  icon String?

  expenses Expense[]
}

// Gelir kaynakları (maaş, freelance vb.)
model IncomeSource {
  id   String  @id @default(cuid())
  name String
  icon String?

  incomes Income[]
}

// Ödeme yöntemleri (nakit, kredi kartı vs.)
model PaymentMethod {
  id   String  @id @default(cuid())
  name String
  icon String?

  expenses Expense[]
}

enum Theme {
  light
  dark
}

enum Language {
  en
  tr
}

// Kullanıcı ayarları
model UserSettings {
  id         String   @id @default(cuid())
  userId     String
  theme      Theme
  language   Language
  currencyId String

  user     User     @relation(fields: [userId], references: [id])
  currency Currency @relation(fields: [currencyId], references: [id])
}
